#!/bin/bash

# Script de d√©ploiement Netlify pour le panel d'administration
# Usage: ./scripts/deploy-netlify.sh

set -e

echo "üöÄ D√©ploiement du Panel d'Administration sur Netlify"
echo "=================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que Netlify CLI est install√©
check_netlify_cli() {
    if ! command -v netlify &> /dev/null; then
        print_error "Netlify CLI n'est pas install√©"
        echo "Installez-le avec: npm install -g netlify-cli"
        exit 1
    fi
    print_message "Netlify CLI d√©tect√©"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
check_directory() {
    if [ ! -f "package.json" ] || [ ! -f "netlify.toml" ]; then
        print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
        exit 1
    fi
    print_message "R√©pertoire du projet d√©tect√©"
}

# Installer les d√©pendances
install_dependencies() {
    print_message "Installation des d√©pendances..."
    npm install
    print_message "D√©pendances install√©es"
}

# Build du projet
build_project() {
    print_message "Build du projet..."
    npm run build
    print_message "Build termin√©"
}

# Test local avec Netlify
test_local() {
    print_message "Test local avec Netlify..."
    if netlify dev --port 8888 &> /dev/null & then
        sleep 5
        print_message "Serveur local d√©marr√© sur http://localhost:8888"
        print_message "Appuyez sur Ctrl+C pour arr√™ter le serveur"
        wait
    else
        print_warning "Impossible de d√©marrer le serveur local"
    fi
}

# D√©ployer sur Netlify
deploy_to_netlify() {
    print_message "D√©ploiement sur Netlify..."
    
    # V√©rifier si l'utilisateur est connect√©
    if ! netlify status &> /dev/null; then
        print_warning "Vous n'√™tes pas connect√© √† Netlify"
        print_message "Connexion √† Netlify..."
        netlify login
    fi
    
    # D√©ployer
    if netlify deploy --prod; then
        print_message "D√©ploiement r√©ussi!"
        
        # R√©cup√©rer l'URL du site
        SITE_URL=$(netlify status --json | grep -o '"url":"[^"]*"' | cut -d'"' -f4)
        if [ ! -z "$SITE_URL" ]; then
            print_message "Site d√©ploy√©: $SITE_URL"
            print_message "Panel d'administration: $SITE_URL/admin"
            print_message "API: $SITE_URL/.netlify/functions/api/admin"
        fi
    else
        print_error "√âchec du d√©ploiement"
        exit 1
    fi
}

# Test de l'API apr√®s d√©ploiement
test_api() {
    print_message "Test de l'API..."
    
    # R√©cup√©rer l'URL du site
    SITE_URL=$(netlify status --json | grep -o '"url":"[^"]*"' | cut -d'"' -f4)
    
    if [ ! -z "$SITE_URL" ]; then
        # Test de l'API principale
        if curl -s "$SITE_URL/.netlify/functions/api/admin" > /dev/null; then
            print_message "‚úÖ API principale fonctionne"
        else
            print_warning "‚ö†Ô∏è API principale ne r√©pond pas"
        fi
        
        # Test de l'API produits
        if curl -s "$SITE_URL/.netlify/functions/api/admin/products" > /dev/null; then
            print_message "‚úÖ API produits fonctionne"
        else
            print_warning "‚ö†Ô∏è API produits ne r√©pond pas"
        fi
    else
        print_warning "Impossible de r√©cup√©rer l'URL du site"
    fi
}

# Afficher les informations de configuration
show_config() {
    print_message "Configuration du projet:"
    echo "  - Build command: npm run build"
    echo "  - Publish directory: out"
    echo "  - Node version: 18+"
    echo "  - Framework: Next.js"
    echo ""
}

# Menu principal
main() {
    echo ""
    echo "Options disponibles:"
    echo "1. V√©rifier la configuration"
    echo "2. Installer les d√©pendances"
    echo "3. Build du projet"
    echo "4. Test local"
    echo "5. D√©ployer sur Netlify"
    echo "6. Test de l'API"
    echo "7. D√©ploiement complet"
    echo "8. Quitter"
    echo ""
    read -p "Choisissez une option (1-8): " choice
    
    case $choice in
        1)
            check_netlify_cli
            check_directory
            show_config
            ;;
        2)
            install_dependencies
            ;;
        3)
            build_project
            ;;
        4)
            test_local
            ;;
        5)
            deploy_to_netlify
            ;;
        6)
            test_api
            ;;
        7)
            check_netlify_cli
            check_directory
            show_config
            install_dependencies
            build_project
            deploy_to_netlify
            test_api
            print_message "üéâ D√©ploiement complet termin√©!"
            ;;
        8)
            print_message "Au revoir!"
            exit 0
            ;;
        *)
            print_error "Option invalide"
            main
            ;;
    esac
}

# V√©rifications initiales
check_netlify_cli
check_directory

# D√©marrer le menu
main